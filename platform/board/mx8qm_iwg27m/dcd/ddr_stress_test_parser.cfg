DEFINE	BD_DDR_RET_NUM_DRC   	2  // Number of DRCs in the SoC

if (action != BOARD_DDR_COLD_INIT)
{
	return SC_ERR_NONE;
}

// DDR Stress Test Parser to obtain information from the OCRAM loaded by the stress test to initialize DDR

typedef enum {
    CMD_WRITE_DATA,
    CMD_SET_BIT,
    CMD_CLR_BIT,
    CMD_CHECK_BIT_SET,
    CMD_CHECK_BIT_CLR,
    CMD_COPY_BIT,
    CMD_DDR_PARAM,
    CMD_RUN_CBT,
    CMD_RUN_RDBI_DESKEW,
    CMD_RUN_VREF_TRAINING,
    CMD_END=0xA5A5A5A5
}dcd_cmd;

typedef struct {
    dcd_cmd cmd;
    uint32_t addr;
    uint32_t val;
    uint32_t bit;
} dcd_node;

enum{
    DRAM_TYPE,	
    TRAIN_INFO,	
    LP4X_MODE,	
    DATA_WIDTH,	
    NUM_PSTAT,	
    FREQUENCY0
};

volatile dcd_node* dcd_ptr = (volatile dcd_node*)0x0011c000;
   volatile uint32_t* dst_addr;
   uint32_t regval,val,bitmask;
   bool quit = false;
   uint32_t ddr_pll;
   board_print(1,"ddrc_init_dcd: 0x%x\r\n",(uint32_t)dcd_ptr);

   while(!quit){
	dst_addr = (volatile uint32_t*)dcd_ptr->addr;
	val = dcd_ptr->val;
	bitmask = dcd_ptr->bit;

	switch (dcd_ptr->cmd){
	case CMD_END:
	boot_print(1,"DCD command finished\r\n");
	err = SC_ERR_NONE;
	quit = true;
	break;

	case CMD_WRITE_DATA:
	boot_print(1,"CMD_WRITE_DATA: dst_addr=0x%x,bitmask=0x%x,val=0x%x\r\n",dst_addr,bitmask,val);
	*dst_addr = val;
	break;

	case CMD_SET_BIT:
	boot_print(1,"CMD_SET_BIT: dst_addr=0x%x,bitmask=0x%x,val=0x%x\r\n",dst_addr,bitmask,val);
	regval = *dst_addr;
	regval |= val;
	*dst_addr = regval;
	break;

	case CMD_CLR_BIT:
	boot_print(1,"CMD_CLR_BIT: dst_addr=0x%x,bitmask=0x%x,val=0x%x\r\n",dst_addr,bitmask,val);
	regval = *dst_addr;
	regval &= ~val;
	*dst_addr = regval;
	break;

	case CMD_CHECK_BIT_SET:
	boot_print(1,"CMD_CHECK_BIT_SET: dst_addr=0x%x,bitmask=0x%x,val=0x%x ...",dst_addr,bitmask,val);
	do{
	    regval = *dst_addr;
	    if((regval&val)==val)
		break;
	}while(1);
	boot_print(1,"Done\r\n");
	break;

	case CMD_CHECK_BIT_CLR:
	boot_print(1,"CMD_CHECK_BIT_CLR: dst_addr=0x%x,bitmask=0x%x,val=0x%x...",dst_addr,bitmask,val);
	do{
	    regval = *dst_addr;
	    if((regval & val)==0)
		break;
	}while(1);
	boot_print(1,"Done\r\n");
	break;

	case CMD_DDR_PARAM:
	boot_print(1,"CMD_DDR_PARAM: dst_addr=0x%x,bitmask=0x%x,val=0x%x...",dst_addr,bitmask,val);
	if(dcd_ptr->addr != FREQUENCY0)
	{
            err = SC_ERR_UNAVAILABLE;
            quit = true;
	    boot_print(1,"Failed\r\n");
	    break;
	}
        ddr_pll = val*1000000/2;
	pm_set_clock_rate(SC_PT, SC_R_DRC_0, SC_PM_CLK_MISC0, &ddr_pll);
	pm_set_clock_rate(SC_PT, SC_R_DRC_1, SC_PM_CLK_MISC0, &ddr_pll);
	boot_print(1,"Done\r\n");
	break;

	case CMD_RUN_CBT:
	boot_print(1,"CMD_RUN_CBT: param_1=0x%x,param_2=0x%x,param_3=0x%x...",dcd_ptr->addr,dcd_ptr->bit,dcd_ptr->val);
	run_cbt(dcd_ptr->addr, dcd_ptr->bit, dcd_ptr->val);
	boot_print(1,"Done\r\n");
    break;

	case CMD_RUN_RDBI_DESKEW:
	boot_print(1,"CMD_RUN_RDBI_DESKEW: param_1=0x%x...",dcd_ptr->addr);
	RDBI_bit_deskew(dcd_ptr->addr);
	boot_print(1,"Done\r\n");
    break;
    
	case CMD_RUN_VREF_TRAINING:
	boot_print(1,"CMD_RUN_VREF_TRAINING: param_1=0x%x...",dcd_ptr->addr);
	DRAM_VREF_training_sw(dcd_ptr->addr);
	boot_print(1,"Done\r\n");
    break;

	default:
	boot_print(1,"Unknown DCD command(0x%x):dst_addr=0x%x,bit=0x%x,val=0x%x\r\n",dcd_ptr->cmd,dst_addr,bitmask,val);
	err = SC_ERR_UNAVAILABLE;
	quit = true;
	break;
	}

	dcd_ptr++;
   }




