/*
** ###################################################################
**
**     Copyright 2019-2020 NXP
**
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**
**     o Neither the name of the copyright holder nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**
** ###################################################################
*/

#define __ASSEMBLY__

#include <MX8/MX8_ddrc.h>
#include <MX8/MX8_ddr_phy.h>

if (action != BOARD_DDR_COLD_INIT)
{
	return SC_ERR_NONE;
}

/*
 * Device Configuration Data (DCD)
 *
 * Each entry must have the format:
 * Addr-type           Address        Value
 *
 * where:
 *	Addr-type register length (1,2 or 4 bytes)
 *	Address	  absolute address of the register
 *	value	  value to be stored in the register
 */

// DSC RESET
DATA 4 0x41C80208 0x1
DATA 4 0x41C80044 0x8
DATA 4 0x41C80204 0x1

  // This is for lpddr4 controller 600MHz 1.67ns and ddr 1200MHz 0.83ns
DATA 4 DDRC_MSTR_0 0x83080020      // Set LPDDR4, BL = 16 and active ranks = 2
DATA 4 DDRC_RFSHTMG_0 0x004900A8   // tREFI, tRFC
DATA 4 DDRC_INIT0_0 0x00020010     // pre_cke = 2ms, post_cke = 2us
DATA 4 DDRC_INIT1_0 0x00100000     // dram_rstn = 20us
DATA 4 DDRC_INIT3_0 0x00440024     // MR1=0x44: nWR=24 ? BL=16;  MR2=0x24: RL=24 WL=12 ?
DATA 4 DDRC_INIT4_0 0x00310000     // MR3, MR13 PDDS 110 PU-CAL VddQ/3
DATA 4 DDRC_RANKCTL_0 0x0000066F   // diff_rank_wr_gap, diff_rank_rd_gap, max_rank_rd
DATA 4 DDRC_DRAMTMG0_0 0x1618141A  // wr2pr roundup((WL 12 + BL/2 8 + nWR 18ns)/2) = 20 hex 14  , tFAW (40ns /2) 25 hex 19 , tRASmax 8.7885us 4 , tRASmin 42ns (42ns/tCK)/2 26 hex 19
DATA 4 DDRC_DRAMTMG1_0 0x00050526  // tXP 7.5ns roundup(tXP/2) 4, rd2pre roundup((BL/2 +8ns - 8)/2) = 5 , tRC 42ns +21ns roundup(63ns/2) = 38 hex
DATA 4 DDRC_DRAMTMG2_0 0x060E1514  // WL 12/2, RL 24/2, rd2wr roundup((RL 24 +BL/2 8 +RU tDQSCK 3.6ns/0.83ns 4.3 +WR_PREAMBLE 2tck + RD_POSTAMBLE 0.5tck -WL 12)/2) = 14, wr2rd RU(WL 12 +BL/2 8+tWTR 10ns +1)/2 17 hex
DATA 4 DDRC_DRAMTMG3_0 0x00909000  // tmrw tMRW ? tMRWCKEL 10CK, tmrd 10tck, tmod present on DDR3/4 only
DATA 4 DDRC_DRAMTMG4_0 0x0B04060B  // trcd 18ns 11, tccd 8tck, trrd 10ns 7, trp 21ns 13
DATA 4 DDRC_DRAMTMG5_0 0x02030909  // tcksrx 3tck, tcksre 5tck, tckesr 7.5ns tSR TBD, tcke 7.5/0.83/2
DATA 4 DDRC_DRAMTMG6_0 0x02020006  // tckdpde, tckdpdx, tckcsx 7.5ns
DATA 4 DDRC_DRAMTMG7_0 0x00000301  // tckpde 5tck, tckpdx
DATA 4 DDRC_DRAMTMG12_0 0x00020510 // tCMDCKE 3tck, tCKEHCMD (=tXP?) ?
DATA 4 DDRC_DRAMTMG13_0 0x0B100002 // tODTLoff ODT disable, tCCDMW 4*8tck 16, tPPD 4tCK
DATA 4 DDRC_DRAMTMG14_0 0x000000AD // txsr tRFCAB 180ns+ 7.5ns
DATA 4 DDRC_ZQCTL0_0  0x02580012   // tZQCAL 1us, tZQLAT 30ns 18
DATA 4 DDRC_ZQCTL1_0  0x01E0493E   // tZQReset 50ns f, tzq_short_interval 0.4s lpddr3  ?
DATA 4 DDRC_DFITMG0_0 0x0499820A   // dfi_t_ctrl_delay, dfi_t_rddata_en, dfi_tphy_wrdata, dfi_tphy_wrlat
DATA 4 DDRC_DFITMG1_0 0x00070303   // dfi_t_wrdata_delay, dfi_t_dram_clk_disable, dfi_t_dram_clk_enable
DATA 4 DDRC_DFITMG2_0 0x00001708   // dfi_tphy_rdcslat, dfi_tphy_wrcslat
DATA 4 DDRC_DFIMISC_0 0x00000005   // dfi_data_cs_polarity
DATA 4 DDRC_DFIUPD0_0 0x00400003   // Disable the automatic dfi_ctrlupd_req generation
DATA 4 DDRC_DFIUPD1_0 0x008000A0   // dfi_ctrlupd_req generation interval generation (min and max)
DATA 4 DDRC_DFIUPD2_0 0x80000000   // dfi_phyupd_en
DATA 4 DDRC_ADDRMAP0_0 0x00000017  // addrmap_cs_bit0
DATA 4 DDRC_ADDRMAP1_0 0x00080808  // addrmap_bank_b2, addrmap_bank_b1, addrmap_bank_b0
DATA 4 DDRC_ADDRMAP4_0 0x00001f1f   // addrmap_col_b11, addrmap_col_b10
DATA 4 DDRC_ADDRMAP5_0 0x07070707  // addrmap_row_b11, addrmap_row_b10_b2, addrmap_row_b1, addrmap_row_b0
DATA 4 DDRC_ADDRMAP6_0 0x07070707  // addrmap_row_b15, addrmap_row_b14, addrmap_row_b13, addrmap_row_b12
DATA 4 DDRC_ADDRMAP7_0 0x00000f0f

DATA 4 DDRC_ODTMAP_0 0x00002211    // rank[3:0]_wr_odt, rank[3:0]_wr_odt
DATA 4 DDRC_PCTRL_0_0 0x00000001   // Enable port 0

// Toggle Reset ...
DATA 4 0x41C80208 0x1
DATA 4 0x41C80044 0x4
DATA 4 0x41C80204 0x1

  //Check that controller is ready to operate
CHECK_BITS_SET 4 DDRC_STAT_0 0x1

// dram_init_inst()
CLR_BIT 4 DDRC_SWCTL_0 0x00000001           // Set SWCTL.sw_done to 0
SET_BIT 4 DDRC_DFIMISC_0 0x00000021         // Set DFIMISC.dfi_init_complete_en to 1 - Trigger DRAM initialization
SET_BIT 4 DDRC_SWCTL_0 0x00000001           // Set SWCTL.sw_done to 1
CHECK_BITS_SET 4 DDRC_SWSTAT_0 0x00000001   // Wait for SWSTAT.sw_done_ack to become 1

  //Check that controller is ready to operate
CHECK_BITS_SET 4 DDRC_STAT_0 0x1
