/*
** ###################################################################
**
**     Copyright 2017-2021 NXP
**
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**
**     o Neither the name of the copyright holder nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**
** ###################################################################
*/

#define __ASSEMBLY__

#include <MX8/MX8_ddrc.h>
#include <MX8/MX8_ddr_phy.h>

if (action != BOARD_DDR_COLD_INIT)
{
	return SC_ERR_NONE;
}

/*
 * Device Configuration Data (DCD)
 *
 * Each entry must have the format:
 * Addr-type           Address        Value
 *
 * where:
 *	Addr-type register length (1,2 or 4 bytes)
 *	Address	  absolute address of the register
 *	value	  value to be stored in the register
 */


// DSC RESET
// First reset ? ZEBU don't know if we need this first reset. 1 
DATA 4 0x41C80208 0x1
DATA 4 0x41C80044 0x8
DATA 4 0x41C80204 0x1

//ddrc_lpddr4_init(inst);

  // This is for lpddr4 controller 600MHz 1.67ns and ddr 1200MHz 0.83ns
DATA 4 DDRC_MSTR_0 0x03080020      // Set LPDDR4, BL = 16 and active ranks = 2
DATA 4 DDRC_RFSHTMG_0 0x0049006D   // tREFI noroundup(3.904us/tCK)/2 36 = 24, tRFC 180ns RoundUp(tRFCmin/tCK)/2 (180/0.83)/2 134 = 86
DATA 4 DDRC_INIT0_0 0x0002000c     // post cke roundup(2us/tCK)/2 pre_cke = 2ms is too long - LPDDR4 model hacked for 20us 00-SDRAM initialization routine is run after power up . 00 and 10 the same ?
DATA 4 DDRC_INIT1_0 0x000c0000     // dram_rstn - LPDDR4 model hacked for 20us;
DATA 4 DDRC_INIT3_0 0x00440024     // MR1=0x44: nWR=24 ? BL=16;  MR2=0x24: RL=24 WL=12 ?
DATA 4 DDRC_INIT4_0 0x00310000     // MR3, MR13 PDDS 110 PU-CAL VddQ/3
DATA 4 DDRC_RANKCTL_0 0x000006cf   // diff_rank_wr_gap, diff_rank_rd_gap, max_rank_rd
DATA 4 DDRC_DRAMTMG0_0 0x1519041a  // wr2pr roundup((WL 12 + BL/2 8 + nWR 18ns)/2) = 20 hex 14  , tFAW (40ns /2) 25 hex 19 , tRASmax 8.7885us 4 , tRASmin 42ns (42ns/tCK)/2 26 hex 19
DATA 4 DDRC_DRAMTMG1_0 0x00040526  // tXP 7.5ns roundup(tXP/2) 4, rd2pre roundup((BL/2 +8ns - 8)/2) = 5 , tRC 42ns +21ns roundup(63ns/2) = 38 hex
DATA 4 DDRC_DRAMTMG2_0 0x060b0e11  // WL 12/2, RL 24/2, rd2wr roundup((RL 24 +BL/2 8 +RU tDQSCK 3.6ns/0.83ns 4.3 +WR_PREAMBLE 2tck + RD_POSTAMBLE 0.5tck -WL 12)/2) = 14, wr2rd RU(WL 12 +BL/2 8+tWTR 10ns +1)/2 17 hex
DATA 4 DDRC_DRAMTMG3_0 0x0170c000  // tmrw tMRW ? tMRWCKEL 10CK, tmrd 10tck, tmod present on DDR3/4 only
DATA 4 DDRC_DRAMTMG4_0 0x0b04070d  // trcd 18ns 11, tccd 8tck, trrd 10ns 7, trp 21ns 13
DATA 4 DDRC_DRAMTMG5_0 0x03040305  // tcksrx 3tck, tcksre 5tck, tckesr 7.5ns tSR TBD, tcke 7.5/0.83/2
DATA 4 DDRC_DRAMTMG6_0 0x00000004  // tckdpde, tckdpdx, tckcsx 7.5ns
DATA 4 DDRC_DRAMTMG7_0 0x00000401  // tckpde 5tck, tckpdx
DATA 4 DDRC_DRAMTMG12_0 0x00020610 // tCMDCKE 3tck, tCKEHCMD (=tXP?) ?
DATA 4 DDRC_DRAMTMG13_0 0x00100002 // tODTLoff ODT disable, tCCDMW 4*8tck 16, tPPD 4tCK
DATA 4 DDRC_DRAMTMG14_0 0x00000039 // txsr tRFCAB 180ns+ 7.5ns
DATA 4 DDRC_ZQCTL0_0  0x025b0012   // tZQCAL 1us, tZQLAT 30ns 18
DATA 4 DDRC_ZQCTL1_0  0x03d72e68   // tZQReset 50ns f, tzq_short_interval 0.4s lpddr3  ?
DATA 4 DDRC_DFITMG0_0 0x0498820a   // dfi_t_ctrl_delay, dfi_t_rddata_en, dfi_tphy_wrdata, dfi_tphy_wrlat
DATA 4 DDRC_DFITMG1_0 0x00060303   // dfi_t_wrdata_delay, dfi_t_dram_clk_disable, dfi_t_dram_clk_enable
DATA 4 DDRC_DFITMG2_0 0x00001608   // dfi_tphy_rdcslat, dfi_tphy_wrcslat
DATA 4 DDRC_DFIMISC_0 0x00000005   // dfi_data_cs_polarity
DATA 4 DDRC_DFIUPD0_0 0x80400003   // Disable the automatic dfi_ctrlupd_req generation
DATA 4 DDRC_DFIUPD1_0 0x00010002   // dfi_ctrlupd_req generation interval generation (min and max)
DATA 4 DDRC_DFIUPD2_0 0x80000000   // dfi_phyupd_en
DATA 4 DDRC_ADDRMAP0_0 0x00000016  // addrmap_cs_bit0
DATA 4 DDRC_ADDRMAP1_0 0x00080202  // addrmap_bank_b2, addrmap_bank_b1, addrmap_bank_b0
DATA 4 DDRC_ADDRMAP2_0 0x02020000
DATA 4 DDRC_ADDRMAP3_0 0x02020202
DATA 4 DDRC_ADDRMAP4_0 0x00001f1f  // addrmap_col_b11, addrmap_col_b10
DATA 4 DDRC_ADDRMAP5_0 0x07070707  // addrmap_row_b11, addrmap_row_b10_b2, addrmap_row_b1, addrmap_row_b0
DATA 4 DDRC_ADDRMAP6_0 0x0f070707  // addrmap_row_b15, addrmap_row_b14, addrmap_row_b13, addrmap_row_b12

// These should not be here
//DATA 4 DDRC_ADDRMAP1_0 0x00171717  // addrmap_bank_b2, addrmap_bank_b1, addrmap_bank_b0
//DATA 4 DDRC_ADDRMAP5_0 0x03030303  // addrmap_row_b11, addrmap_row_b10_b2, addrmap_row_b1, addrmap_row_b0
//DATA 4 DDRC_ADDRMAP6_0 0x03030303  // addrmap_row_b15, addrmap_row_b14, addrmap_row_b13, addrmap_row_b12

DATA 4 DDRC_ODTMAP_0 0x00002211    // rank[3:0]_wr_odt, rank[3:0]_wr_odt
DATA 4 DDRC_PCTRL_0_0 0x00000001   // Enable port 0

// in ddrc_init_inst()
CLR_BIT 4 DDRC_DFIMISC_0 0x00000001
// As DRAM init sequence will be run by controller set 0x0 to skip_dram_init field
CLR_BIT 4 DDRC_INIT0_0 0xC0000000


// Do we need this as well? Didn't need to set before ZEBU 2 
DATA 4 DDRC_PWRCTL_0 0x10D

// Toggle Reset ... ZEBU NEED THIS? 3
//DATA 4 0x41C80208 0x1
//DATA 4 0x41C80044 0x4
//DATA 4 0x41C80204 0x1

  //-------------------------------------------
  // Configure registers for PHY initialization
  // Timings are computed for a PHY at 600MHz (DRAM at 1200MHz) 600MHz 1.67ns ddr 1200MHz 0.83ns
  //-------------------------------------------

//ddr_phy_lpddr4_phy_init()

  // Set-up DRAM Configuration Register
DATA 4 DDR_PHY_DCR_0 0x0000040D          // LPDDR4 selection with 8 bank

  // Set-up PHY General Configuration Register
  // PGCR0,1,4,5,6,7 are untouched
DATA 4 DDR_PHY_PGCR0_0 0x87001e00        // address copy
DATA 4 DDR_PHY_PGCR2_0 0x00F0A3CC        // Set tREFPRD (9*3.904us)
DATA 4 DDR_PHY_PGCR3_0 0x050A1080        // CKEN/CKNEN toggling and polarity

  // Set-up PHY Timing Register
  // PTR2 is untouched
DATA 4 DDR_PHY_PTR0_0 0x64032010        // tPLLPD, tPLLGS, tPHYRST
  // CAST32(DDR_PHY_PTR1_0 0x4E201C20   // tPLLLOCK=25us, tPLLRST=9us
DATA 4 DDR_PHY_PTR1_0 0x0D701C20        // tPLLLOCK reduced to 4.3us, tPLLRST=9us

  // Set-up PLL Control Register
DATA 4 DDR_PHY_PLLCR0_0 0x00000000      // FREQSEL=0
DATA 4 DDR_PHY_DX8SLbPLLCR0_0 0x08000000

  // Set-up Impedance Control Register
DATA 4 DDR_PHY_ZQCR_0 0x001FEC58        // Set ODT_MODE=0b10(LPDDR4 stype pullup)

  // Set-up Impedance Controller Program Register
  // ZQnPR0, ZQnPR1 are untouched, lpddr4 PD_REFSEL should not be default value, FIXME

// ddr_phy_launch_init()
  // Set-up PHY Initialization Register
DATA 4 DDR_PHY_PIR_0 0x40

  // Launch initialization (set bit 0)
DATA 4 DDR_PHY_PIR_0 0x41

  //-------------------------------------------
  // Configure registers for DRAM initialization
  //-------------------------------------------
  //ddr 1200MHz 0.83ns

// ddr_phy_lpddr4_dram_init() 

  // Set-up Mode Register
  // MR0, MR3, MR4, MR5 MR6 are untouched
DATA 4 DDR_PHY_MR1_0 0x44         // Set BL, WR-PRE, nWR, RPST
DATA 4 DDR_PHY_MR2_0 0x24         // Set RL=24/WL=12
DATA 4 DDR_PHY_MR3_0 0x31         // Set drive strength to 40 ohms typical pull-down/pull-up

  // Set-up DRAM Timing Parameters Register
  // DTPR6 is untouched
DATA 4 DDR_PHY_DTPR0_0 0x0d331a05   // tRRD (10/0.83 = 13), tRAS (42ns/0.83 = 51 ), tRP (21ns/0.83 = 26 1A), tRTP (101)
DATA 4 DDR_PHY_DTPR1_0 0x28318C0a   // tWLMRD, tFAW(40ns/0.83 = 49 31), tODTUP(odt is disable), tMRD(10 tck)
DATA 4 DDR_PHY_DTPR2_0 0x003a00E2   // tRTW, tRTODT, tCMDCKE, tCKE (7.5 / 0.83 = 10 a), tXS(180ns + 7.5ns / 0.83 = 226 )
DATA 4 DDR_PHY_DTPR3_0 0x01800502   // tODX, tCCD, tDLLK, tDQSCKmax, tDQSCK (3.6ns / 0.83 ) (FIXME double check tDLLK)
DATA 4 DDR_PHY_DTPR4_0 0x01C0000a   // tRFC(180ns/0.83), tWLO, tXP (7.5ns / 0.83 )
DATA 4 DDR_PHY_DTPR5_0 0x004c160d   // tRC (tRAS + tRPab = (42+21)/0.83 = 76  ), tRCD (18ns / 0.83 = 22 ), tWTR (10ns / 0.83 13 d)

  // Set-up PHY Timing Register
  // DATA 4 DDR_PHY_PTR3_0 0x0030D400   // tDINIT0 - 2ms
DATA 4 DDR_PHY_PTR3_0 0x00005E21   // tDINIT0 - memory model hacked to 20us 25097
DATA 4 DDR_PHY_PTR4_0 0x0000096A   // tDINIT1 (2000ns) 2410
DATA 4 DDR_PHY_PTR5_0 0x00005E21   // tDINIT2 - normally 200us but memory model hacked to 20us
DATA 4 DDR_PHY_PTR6_0 0x025004B5   // tDINIT4 (30ns) 37, tDINIT3 (1us) 1205

  // RDIMMGCR0-2 RDIMMGCR0-4??

  // Set-up DATX8 Common Configuration Register
  // DXCCR is untouched

  // Set-up DDR System General Configuration Register
  // DSGCR is untouched

  // Set-up ODT Configuration Register
  // ODTCR is untouched

  // Set-up Anti-Aging Control Register
  // AACR is untouched

  // Set-up Data Training Address Register
  // DTAR0-3 are untouched
  // !! DTAR3 is not described in spec !!

  // Set-up AC I/O Configuration Register
  // ACIOCR1-4 are untouched
DATA 4 DDR_PHY_ACIOCR0_0 0x30070800   // PNUM2 (i.e.LPDDR4) selection  [10:11] = 0x2
DATA 4 DDR_PHY_ACIOCR5_0 0x09000000   // I/O mode = LPDDR4

  // IOVCR0-1, DXnGCR0-4??, CALBYP

  // Set-up VREF Training Control Registers
DATA 4 DDR_PHY_VTCR0_0 0xF0032019   // CK1, CK0
DATA 4 DDR_PHY_VTCR1_0 0x07F00173   // HVIO=1, SHREN=1, SHRNK=0

  // Set-up DATX8 General Configuration Registers
  // DXnGCR0-4 are untouched

  // Set-up DATX8 DX Control Register 2
DATA 4 DDR_PHY_DX8SLbDXCTL2_0 0x081800    // PREOEX=2tCK, POSOEX=0.5tCK

  // Set-up DATX8 IO Control Register
DATA 4 DDR_PHY_DX8SLbIOCR_0 0x09000000  // I/O mode = LPDDR4

  // Set-up DATX8 DQS Control Register
DATA 4 DDR_PHY_DX8SLbDQSCTL_0 0x013E4091  // DQS resistor

//ddr_phy_wait_init_done()
  // Wait for bit 0 of PGSR0 to be '1'
CHECK_BITS_SET 4 DDR_PHY_PGSR0_0 0x1

// ddr_phy_launch_init()
  // Set-up PHY Initialization Register
DATA 4 DDR_PHY_PIR_0 0x40000

  // Launch initialization (set bit 0)
DATA 4 DDR_PHY_PIR_0 0x40001

// ddr_phy_wait_init_done
  // Wait for bit 0 of PGSR0 to be '1'
CHECK_BITS_SET 4 DDR_PHY_PGSR0_0 0x1


// Toggle Reset? ZEBU don't know if correct reset inserted here. 4
DATA 4 0x41C80208 0x1
DATA 4 0x41C80044 0xF
//DSC_SetReset(SC_DSC_DRC_0, BIT(RST_DDR_CRESETN), SC_TRUE);
DATA 4 0x41C80204 0x1


// dram_init_inst()
CLR_BIT 4 DDRC_SWCTL_0 0x00000001           // Set SWCTL.sw_done to 0
SET_BIT 4 DDRC_DFIMISC_0 0x00000001         // Set DFIMISC.dfi_init_complete_en to 1 - Trigger DRAM initialization
SET_BIT 4 DDRC_SWCTL_0 0x00000001           // Set SWCTL.sw_done to 1
CHECK_BITS_SET 4 DDRC_SWSTAT_0 0x00000001   // Wait for SWSTAT.sw_done_ack to become 1

  //Check that controller is ready to operate
CHECK_BITS_SET 4 DDRC_STAT_0 0x1
